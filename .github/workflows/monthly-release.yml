name: Monthly Release

on:
  schedule:
    - cron: '0 0 1 * *'  
  workflow_dispatch:  

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Get latest version tag
        id: get_latest_tag
        run: |          
          latest_tag=$(git tag --sort=-v:refname | grep '^v' | head -n 1)
          echo "Latest tag: $latest_tag"
          echo "tag=$latest_tag" >> $GITHUB_ENV  

      - name: Compute next minor version
        id: compute_version
        env:
          tag: ${{ env.tag }} 
        run: |
          tag="$tag"
          tag="${tag#v}"  # Strip the 'v' from the beginning
          IFS='.' read -r major minor patch <<< "$tag"
          minor=$((minor + 1))
          new_tag="v$major.$minor.0"
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Generate release notes
        id: generate_notes
        run: |
          previous_tag="${{ env.tag }}"
          new_tag="${{ env.new_tag }}"
          notes_url="https://github.com/${{ github.repository }}/compare/${previous_tag}...${new_tag}"
          echo "Release notes: Comparison between $previous_tag and $new_tag"
          echo "release_notes=See changes: $notes_url" >> $GITHUB_ENV

      - name: Get merged PRs between tags
        id: get_prs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          previous=${{ env.tag }}
          new=${{ env.new_tag }}
      
          prs=$(gh pr list --state merged --base main --json number,title,mergedAt --jq \
            ".[] | select(.mergedAt >= \"$previous\" and .mergedAt < \"$new\") | \"- #\(.number): \(.title)\"")
      
          if [ -z "$prs" ]; then
            prs="No pull requests merged."
          fi
      
          echo "Pull requests merged between $previous and $new:"
          echo "$prs"
      
          echo "release_notes=$prs" >> $GITHUB_ENV

     
        
