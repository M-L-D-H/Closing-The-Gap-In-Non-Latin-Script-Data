
name: Monthly Release

on:
  schedule:
    - cron: '0 0 1 * *'  
  workflow_dispatch:  

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version tag
        id: get_latest_tag
        run: |          
          latest_tag=$(git tag --sort=-v:refname | grep '^v' | head -n 1)
          echo "Latest tag: $latest_tag"
          echo "tag=$latest_tag" >> $GITHUB_ENV  

      - name: Compute next minor version
        id: compute_version
        env:
          tag: ${{ env.tag }} 
        run: |
          tag="$tag"
          tag="${tag#v}"  # Strip the 'v' from the beginning
          IFS='.' read -r major minor patch <<< "$tag"
          minor=$((minor + 1))
          new_tag="v$major.$minor.0"
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Create and push new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}

      - name: Get merged PRs between tags
        id: get_prs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          previous=${{ env.tag }}
          new=${{ env.new_tag }}

          previous_date=$(git log -1 --format=%cI $previous)
          new_date=$(date -Iseconds)  # Use current time for just-created tag

          echo "Previous tag date: $previous_date"
          echo "New tag date: $new_date"

          changelog=$(gh pr list --state merged --base master --json number,title,mergedAt,author,url --jq \
            ".[] 
             | select(.mergedAt >= \"$previous_date\" and .mergedAt < \"$new_date\") 
             | \"- \(.title) by [@\(.author.login)](https://github.com/\(.author.login)) in [#\(.number)](\(.url))\"")

          if [ -z "$changelog" ]; then
            changelog="No pull requests merged."
          else
            changelog="## What's Changed"$'\n'"$changelog"
          fi

          echo "Changelog for release:"
          echo "$changelog"

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.new_tag }}
          name: Release ${{ env.new_tag }}
          body: ${{ steps.get_prs.outputs.release_notes }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

